{
  "openapi": "3.0.1",
  "info": {
    "title": "Product Purchase System(PPS) 1.1.0",
    "description": "Marketplaces offer immense growth potential for businesses within B2C and B2B industries. By adopting a marketplace model, companies have the opportunity to scale at a much quicker pace while reducing risk.\nwe provide multi endpoints to making changes to the application and get the data and here the all api EndPoints documentation.\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "product",
      "description": "Everything about your Product",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
   
    {
      "name": "order",
      "description": "Everything about your order",
      "externalDocs": {
        "description": "Find out more about our order",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/addproducts": {
      "post": {
        "tags": [
          "product"
        ],
        "summary": "Add a new product to the store",
        "description": "Add a new product to the store",
        "operationId": "addproducts",
        "requestBody": {
          "description": "Create a new product in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:product",
              "read:product"
            ]
          }
        ]
      }
    },
    "/updateproducts": {
      "put": {
        "tags": [
          "product"
        ],
        "summary": "Update a product in the store",
        "description": "Update an existing product in the store",
        "operationId": "updateProducts",
        "requestBody": {
          "description": "Product information to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "You must provide ProductId, Price, Type, Name, and Description"
          },
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "404": {
            "description": "Product not updated!"
          }
        },
        "security": [
          {
            "checkAuthUser": [
              "write:product",
              "read:product"
            ]
          }
        ]
      }
    },
    "/deleteproduct/{ProductId}": {
      "delete": {
        "tags": [
          "product"
        ],
        "summary": "Delete a product from the store",
        "description": "Delete an existing product from the store",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "The ID of the product to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product id to delete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": {}
                  },
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "read:product",
              "write:product"
            ]
          }
        ]
      }
    },
    "/getproducts": {
      "get": {
        "tags": [
          "product"
        ],
        "summary": "Get a list of products",
        "description": "Retrieve a list of all products in the store",
        "operationId": "getProducts",
        "responses": {
          "200": {
            "description": "Successful response with a list of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "404": {
            "description": "Products not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          }
        }
      }
    },
    
   
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-access-token": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "Place a new order in the store",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/api/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by making registarion.",
        "operationId": "SignUp",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "You have been successfully registered",
            "headers": {},
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Error"
          },
          "409": {
            "description": "User is already exists"
          },
          "403": {
            "description": "please try another passowrd"
          },
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/signin": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "SignIn",
        "parameters": [

        ],
        "requestBody": {
          "description": "signIn",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/api/user/deleteuser/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session and remove frm database",
        "description": "",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "user id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "x-access-token": []
          }
        ]
      }
    },
    "/api/user/updateuserinfo/{id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "update user by user id",
        "description": "",
        "operationId": "UpdateUserInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use id for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-access-token",
            "in": "header",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Updated!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
  


  "/AddOrder": {
    "post": {
      "tags": [
        "order"
      ],
      "summary": "Create order",
      "description": "Add new order.",
      "operationId": "createOrder",
      "requestBody": {
        "description": "Created order object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "responses": {
        "default": {
          "description": "successful operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        }
      }
    }
  },

"/getorder/{UserId}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Find order by UserID",
        "description": "Returns a list of orders for user",
        "operationId": "getOrderByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "string"
            
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid UserID supplied"
          },
          "404": {
            "description": "order not found"
          }
        },
        "security": [
          {
            "x-access-token": []
          },
          {
            "petstore_auth": [
              "write:order",
              "read:order"
            ]
          }
        ]
      }
      },

      "/deleteorder/{orderId}": {
        "delete": {
          "tags": [
            "order"
          ],
          "summary": "Delete a order ",
          "description": "",
          "operationId": "deleteorder",
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "The ID of the order to delete",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "order id to delete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "order deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            },
            "404": {
              "description": "order not found",
              "content": {
                "application/json": {
                  "schema": {
                    "additionalProperties": {
                      "type": {}
                    },
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "security": [
            {
              "petstore_auth": [
                "read:order",
                "write:order"
              ]
            }
          ]
        }
      }
    },

  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "int64",
            "example": 10
          },
          "UserId": {
            "type": "string",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "OrderDate": {
            "type": "string",
            "format": "date-time"
          },
          "ProductId": {
            "type": "string"
          
          },
          "Price": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "example": "theUser"
          },
          "Email": {
            "type": "string",
            "example": "john@email.com"
          },
          "Password": {
            "type": "string",
            "example": "12345"
          },
          "PhoneNumber": {
            "type": "string",
            "example": "12345"
          },
          "Address": {
            "type": "string",
            "example": "jordan"
          },
          "IsAdmin": {
            "type": "bool",
            "description": "is user admin",
            "example": true
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "SignIn": {
        "type": "object",
        "properties": {
          "Email": {
            "type": "string",
            "example": "john@email.com"
          },
          "Password": {
            "type": "string",
            "example": "12345"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "example": "theUserUpdate"
          },
          "Password": {
            "type": "string",
            "example": "12345"
          },
          "PhoneNumber": {
            "type": "string",
            "example": "12345333"
          },
          "Address": {
            "type": "string",
            "example": "jordan-irbid"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "UserName",
          "Password",
          "Email",
          "PhoneNumber",
          "Address",
          "IsAdmin"
        ],
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": [
          "UserName",
          "Password",
          "Email",
          "PhoneNumber",
          "Address",
          "IsAdmin"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "checkAuthUser": {
        "type": "apiKey",
        "flows": {}
      }
    },
    "x-access-token": {
      "type": "apiKey",
      "name": "x-access-token",
      "in": "header"
    }
  }
}
